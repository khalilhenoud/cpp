cmake_minimum_required(VERSION 3.22)

# set the project name
project(CPP11 VERSION 1.0)

# config file
configure_file(config.h.in config.h)

# specify the cpp standard
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# add the executable
add_executable(${PROJECT_NAME} 
			"./source/driver.cpp"
			"./source/registrar.cpp"
			"./source/utils.cpp"
			"./source/language/attributes.cpp"
      "./source/language/inline_namespaces.cpp"
      "./source/language/range_based_for_loops.cpp"
      "./source/language/classes/converting_constructors.cpp"
      "./source/language/classes/default_functions.cpp"
      "./source/language/classes/delegating_constructors.cpp"
      "./source/language/classes/deleted_functions.cpp"
      "./source/language/classes/explicit_conversion_functions.cpp"
      "./source/language/classes/explicit_virtual_overrides.cpp"
      "./source/language/classes/final_specifier.cpp"
      "./source/language/classes/move_semantics.cpp"
      "./source/language/classes/non_static_data_member_initializers.cpp"
      "./source/language/classes/ref_qualified_member_functions.cpp"
      "./source/language/classes/sizeof_member_variables.cpp"
      "./source/language/classes/special_member_functions_for_move_semantics.cpp"
      "./source/language/functions/lambda_expressions.cpp"
      "./source/language/functions/noexcept_specifier.cpp"
      "./source/language/functions/trailing_return_types.cpp"
      "./source/language/literals/nullptr.cpp"
      "./source/language/literals/raw_string_literals.cpp"
      "./source/language/literals/user_defined_literals.cpp"
      "./source/language/templates/forwarding_references.cpp"
      "./source/language/templates/right_angle_brackets.cpp"
      "./source/language/templates/variadic_templates.cpp"
      "./source/language/types/alignas_alignof.cpp"
      "./source/language/types/auto.cpp"
      "./source/language/types/constexpr.cpp"
      "./source/language/types/decltype_operator.cpp"
      "./source/language/types/initializer_lists.cpp"
      "./source/language/types/rvalue_references.cpp"
      "./source/language/types/static_assert.cpp"
      "./source/language/types/strong_typed_enums.cpp"
      "./source/language/types/thread_local_storage.cpp"
      "./source/language/types/type_aliases.cpp"
      "./source/language/types/unrestricted_unions.cpp"
      "./source/library/begin_end.cpp"
      "./source/library/random.cpp"
      "./source/library/regex.cpp"
      "./source/library/type_traits.cpp"
      "./source/library/concurrency support/async.cpp"
      "./source/library/concurrency support/atomic.cpp"
      "./source/library/concurrency support/call_once.cpp"
      "./source/library/concurrency support/condition_variable.cpp"
      "./source/library/concurrency support/future.cpp"
      "./source/library/concurrency support/lock.cpp"
      "./source/library/concurrency support/lock_guard.cpp"
      "./source/library/concurrency support/lock_tag.cpp"
      "./source/library/concurrency support/memory_order.cpp"
      "./source/library/concurrency support/mutex.cpp"
      "./source/library/concurrency support/notify_all_at_thread_exit.cpp"
      "./source/library/concurrency support/packaged_task.cpp"
      "./source/library/concurrency support/promise.cpp"
      "./source/library/concurrency support/recursive_mutex.cpp"
      "./source/library/concurrency support/recursive_timed_mutex.cpp"
      "./source/library/concurrency support/shared_future.cpp"
      "./source/library/concurrency support/thread.cpp"
      "./source/library/concurrency support/timed_mutex.cpp"
      "./source/library/concurrency support/try_lock.cpp"
      "./source/library/concurrency support/unique_lock.cpp"
      "./source/library/containers/array.cpp"
      "./source/library/containers/forward_list.cpp"
      "./source/library/containers/unordered_containers.cpp"
      "./source/library/general utilities/chrono.cpp"
      "./source/library/general utilities/forward.cpp"
      "./source/library/general utilities/function.cpp"
      "./source/library/general utilities/move.cpp"
      "./source/library/general utilities/ref.cpp"
      "./source/library/general utilities/tie.cpp"
      "./source/library/general utilities/tuple.cpp"
      "./source/library/memory management/make_shared.cpp"
      "./source/library/memory management/smart_pointers.cpp"
      "./source/library/strings/char32_t_and_char16_t.cpp"
      "./source/library/strings/to_string.cpp"
)

target_include_directories(${PROJECT_NAME} PUBLIC 
							"${PROJECT_BINARY_DIR}"
							"${PROJECT_SOURCE_DIR}/include"
							)